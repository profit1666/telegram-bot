import telebot
from telebot import types
import random
import sqlite3
from datetime import datetime
from webserver import keep_alive

bot = telebot.TeleBot("7856074080:AAE9HoPWWVGGPlWiySZoKlMFVE5VPb5SvVU")
keep_alive()

# ЁЯУж ╨С╨░╨╖╨░ ╨┤╨░╨╜╨╜╤Л╤Е
conn = sqlite3.connect('leads.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS leads (
        user_id INTEGER PRIMARY KEY,
        language TEXT,
        timestamp TEXT
    )
''')
conn.commit()

user_language = {}
coef_history = []

# ЁЯО░ ╨У╨╡╨╜╨╡╤А╨░╤Ж╨╕╤П ╨║╨╛╤Н╤Д╤Д╨╕╤Ж╨╕╨╡╨╜╤В╨░
def generate_number():
    r = random.random()
    if r < 0.70:
        return round(random.uniform(0.52, 20.0), 2)
    elif r < 0.95:
        return round(random.uniform(20.1, 99.9), 2)
    else:
        return round(random.uniform(100.0, 999.9), 1)

# ЁЯФо ╨Я╤А╨╛╨│╨╜╨╛╨╖ ╤Б╨╗╨╡╨┤╤Г╤О╤Й╨╡╨│╨╛ ╨║╨╛╤Н╤Д╤Д╨╕╤Ж╨╕╨╡╨╜╤В╨░
def predict_next():
    if len(coef_history) < 5:
        return round(random.uniform(2.0, 10.0), 2)
    avg = sum(coef_history[-5:]) / 5
    return round(avg * random.uniform(0.85, 1.15), 2)

# ЁЯОУ ╨б╨╛╨▓╨╡╤В ╨╕╨│╤А╨╛╨║╤Г
def generate_advice(lang):
    if len(coef_history) < 5:
        return "ЁЯУМ Not enough data for advice." if lang == "en" else "ЁЯУМ рд╕рд▓рд╛рд╣ рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП рдкрд░реНрдпрд╛рдкреНрдд рдбреЗрдЯрд╛ рдирд╣реАрдВ рд╣реИред"
    avg = sum(coef_history[-5:]) / 5
    if avg < 5.0:
        return "ЁЯУЙ Low signals lately. A spike is possible тАФ consider entering!" if lang == "en" else "ЁЯУЙ рд╣рд╛рд▓ рдХреЗ рд╕рд┐рдЧреНрдирд▓ рдХрдо рд░рд╣реЗ рд╣реИрдВ тАФ рдЕрдЧрд▓реЗ рдореЗрдВ рд╡реГрджреНрдзрд┐ рд╣реЛ рд╕рдХрддреА рд╣реИ!"
    elif avg > 50.0:
        return "тЪая╕П High values recently. Risk of drop тАФ better to wait." if lang == "en" else "тЪая╕П рд╣рд╛рд▓ рд╣реА рдореЗрдВ рд╕рд┐рдЧреНрдирд▓ рдЕрдзрд┐рдХ рд░рд╣реЗ рд╣реИрдВ тАФ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░рдирд╛ рдмреЗрд╣рддрд░ рд╣реЛрдЧрд╛ред"
    else:
        return "ЁЯУК Average signals. Consider a small deposit." if lang == "en" else "ЁЯУК рд╕рд┐рдЧреНрдирд▓ рд╕рд╛рдорд╛рдиреНрдп рд╣реИрдВ тАФ рдереЛрдбрд╝реА рд░рд╛рд╢рд┐ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"

# ЁЯЪА ╨б╤В╨░╤А╤В
@bot.message_handler(commands=['start'])
def start(message):
    send_language_selection(message.chat.id)

def send_language_selection(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("ЁЯЗмЁЯЗз English"), types.KeyboardButton("ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА"))
    bot.send_message(chat_id, "Please choose your language:\nрдХреГрдкрдпрд╛ рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:", reply_markup=markup)

# ЁЯМН ╨Т╤Л╨▒╨╛╤А ╤П╨╖╤Л╨║╨░
@bot.message_handler(func=lambda m: m.text in ["ЁЯЗмЁЯЗз English", "ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА"])
def choose_language(message):
    lang = "en" if "English" in message.text else "hi"
    chat_id = message.chat.id
    user_language[chat_id] = lang

    now = datetime.utcnow().isoformat()
    cursor.execute("INSERT OR REPLACE INTO leads (user_id, language, timestamp) VALUES (?, ?, ?)",
                   (chat_id, lang, now))
    conn.commit()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("ЁЯОп Get Signal" if lang == "en" else "ЁЯОп рд╕рд┐рдЧреНрдирд▓ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ"))
    markup.add("ЁЯФо Predict", "ЁЯУК History", "ЁЯОУ Advice")
    markup.add(types.KeyboardButton("ЁЯФД Change Language" if lang == "en" else "ЁЯФД рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ"))
    bot.send_message(chat_id, "Welcome! Ready to explore signals." if lang == "en" else "рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рд╕рд┐рдЧреНрдирд▓ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВред", reply_markup=markup)

# ЁЯУ▓ ╨Ю╨▒╤А╨░╨▒╨╛╤В╨║╨░ ╨║╨╜╨╛╨┐╨╛╨║
@bot.message_handler(func=lambda m: m.text in [
    "ЁЯОп Get Signal", "ЁЯОп рд╕рд┐рдЧреНрдирд▓ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ", "ЁЯФД Change Language", "ЁЯФД рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ", "ЁЯФо Predict", "ЁЯУК History", "ЁЯОУ Advice"])
def handle_buttons
